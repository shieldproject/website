{
  "all": [
    {
      "notes": "SHIELD v8 is a marked improvement over previous version of SHIELD.\r\n\r\n# New Features\r\n\r\n  - *Multi-Tenancy* - SHIELD now supports the notion of tenants, which allow\r\n    site operators to group their users logically, and sequester teams from\r\n    one another.  Each tenant has its own set of jobs, tasks, archives,\r\n    etc., and members of one tenant cannot interact with the resources of\r\n    another.  Users can be assigned to multiple tenants, concurrently.\r\n\r\n  - *Archive Encryption* - SHIELD now leverages AES-256 encryption when\r\n    storing backup archives in cloud storage, making sure that your data is\r\n    secure, even at-rest.\r\n\r\n  - *Agent Registration* - SHIELD Agents now register with the SHIELD Core,\r\n    and provide metadata to assist operators in the configuration of backup\r\n    targets, and cloud storage systems.\r\n\r\n  - *Improved Web UI* - SHIELD's web-based user interface got a massive\r\n    overhaul in this release, with a concerted focus on efficiency and\r\n    ease-of-use for operators, and their immediate concerns.\r\n\r\n  - *New CLI* - The SHIELD CLI has been rewritten from the ground-up to\r\n    interface more cleanly with the SHIELD v8 API.  It handles plugin\r\n    configuration more naturally, without forcing you to write proper JSON.\r\n    Yay.  It also supports a new `import` function that makes it easy to\r\n    ensure that your target and storage systems, jobs, retention policies,\r\n    etc. are always correct.\r\n\r\n  - *Improved Scheduling* - Backup Jobs can now be run every X hours, much\r\n    to the delight of SHIELD users everywhere.",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.0",
      "version": "8.0.0"
    },
    {
      "notes": "**SHIELD 8.x is still beta software; not recommended for production deployment**\r\n\r\n# New Features\r\n\r\n- The `azure` plugin now features a `path_prefix` setting to allow\r\n  sharing of a single Azure Blobstore container amongst several\r\n  jobs and/or SHIELDs.\r\n\r\n# Improvements\r\n\r\n- The `fs` plugin no longer relies on the `bsdtar` executable to\r\n  function; instead, all tarball creation / extraction is handled\r\n  directly by the plugin code, making it easier to deploy.\r\n\r\n- The `test-store` and `purge` tasks that are scheduled in the\r\n  slow loop are now skipped if the Vault is sealed.  This keeps\r\n  the task list from growing with lots of tasks that will not be\r\n  scheduled until later.  For `purge` tasks this wasn't a huge\r\n  deal, but for `test-store` it meant that cloud storage would get\r\n  slammed with test after test after test after test as soon as\r\n  the SHIELD was unlocked.\r\n\r\n# Breaking Changes\r\n\r\n- The `fs` plugin no longer functions as a store plugin.  This\r\n  configuration was deemed to dangerous in the wild, given the\r\n  locality constraints.  If you need local-ish filesystem-backed\r\n  storage, check out the `webdav` plugin.\r\n\r\n# Bug Fixes\r\n\r\n- WebSocket broadcast receivers are only registered _after_ a\r\n  successful upgrade from plain HTTP to WebSockets, to avoid\r\n  stalling out the core on badly-behaved clients.\r\n\r\n- The CLI now honors `-k` everywhere it appears.\r\n\r\n- It is now possible to update a target / store that was created\r\n  without any configuration (no `--data` on create-*).\r\n\r\n- CLI update-* commands now properly display the updated object\r\n  attributes, instead of an empty report.\r\n\r\n- The `create-auth-token` CLI command now honors `--json`.\r\n\r\n- Fix javascript event handler stacking bugs in the web UI.  In\r\n  short, form submissions would \"remember\" their previous onsubmit\r\n  handlers, leading to some _very_ interesting errors on both\r\n  client- and server-side.",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.1",
      "version": "8.0.1"
    },
    {
      "notes": "**SHIELD 8.x is still beta software; not recommended for production deployment**\r\n\r\n# New Features\r\n\r\n- SHIELD now supports Fixed Key encryption for disaster recovery\r\n  of backups for SHIELD itself.\r\n\r\n# Improvements\r\n\r\n- The `s3` plugin now uses pathd buckets, so it should work better\r\n  with S3-workalikes that don't support DNS-style buckets.\r\n\r\n- The `fs` plugin strips the base director from the files as they\r\n  are archived, allowing archives to be portably replayed to\r\n  different base directors on restore.\r\n\r\n- The `mysql` and `xtrabackup` plugins are better now.\r\n\r\n- `buckler import` works better now, no longer requiring a SHIELD\r\n  core (via either `--core` or `$SHIELD_CORE`).  It also now\r\n  supports skipping TLS verification of the SHIELD Core.\r\n\r\n# Bug Fixes\r\n\r\n- Plugins now accept boolish strings and numbers in place of\r\n  actual booleans.\r\n\r\n- Handle symlinks in the `fs` plugin\r\n\r\n- The S3 plugin now properly sets a multipart upload chunk size\r\n  of 5 MEGABYTES, not 5 GIGABYTES, so we don't OOM on VMs.  Oops.\r\n\r\n- The WebUI can now display OAuth provider configuration (again).\r\n\r\n- `buckler create-policy` now properly validates the expiry value\r\n  as a number.\r\n\r\n- SHIELD Core no longer leaks file descriptors when talking to the\r\n  sealed Vaults.",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.3",
      "version": "8.0.3"
    },
    {
      "notes": "# Bug Fixes\n\n- The v8 Web UI now properly renders target plugin forms, based\n  on the metadata provided by the plugins themselves.  Previously,\n  only the fs plugin was working, due to the next bug we fixed.\n\n- The fs plugin was mistakenly reporting a store field, something\n  that got missed when we removed its ability to act as a store\n  plugin.\n\n- The swift plugin now features field metadata.",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.4",
      "version": "8.0.4"
    },
    {
      "notes": "# Improvements\n\n- The Github OAuth provider now properly handles Github Enterprise\n  for API work (user lookups, org lookups, etc.)\n\n- The Github OAuth provider can now handle assignment across\n  multiple tenants (including SYSTEM) from a single Github Org.\n\n- Shield CLI has been renamed from `buckler` back to `shield` similar\n  to previous versions.\n\n- Added Cassandra target plugin.\n\n\n# Bug Fixes\n\n- Fix a missing slash in the Github Authentication Provider\n  display, in the administrative backend.\n\n- The Web UI now propagates the job name from the configuration\n  wizard to the API, replacing 'a random name?' with something\n  just a bit less ... random.",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.5",
      "version": "8.0.5"
    },
    {
      "notes": "# Bug Fixes\n\n- Fix non-deterministic short-circuit bug in Github OAuth role\n  assignment logic that lead to different behaviors depending on\n  how Github returned org/team memberships.",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.6",
      "version": "8.0.6"
    },
    {
      "notes": "# Bug Fixes\n\n- `shield-agent` will now propagate HTTP proxy environment\n  variables: `http_proxy`, `https_proxy` and `no_proxy`, which\n  some plugins (i.e. s3) can make use of.\n\n- The `postgres` plugin no longer requires a host address.  If not\n  specified, a local loopback (usually UNIX domain socket) will be\n  attempted.\n\n- The `postgres` plugin no longer requires a password.  If not\n  specified, no authentication credentials will be sent.  This is\n  usually paired with an empty (or missing) pg_host, to gain\n  superuser access over loopback (given a 'trust' entry in HBA)",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.7",
      "version": "8.0.7"
    },
    {
      "notes": "# Improvements\n\n- Global Storage Systems are available for selection during the\n  backup configuration wizard in the web UI.\n\n- Storage systems now properly report their health to all\n  front-end views, fixing a few fixmes along the way.\n\n- Agents can now be resynchronized, in an ad hoc fashion, via the\n  admin backend on the web UI.\n\n- Jobs will have their 'next run' time re-calculated when their\n  schedule is changed.  Previously, the existing schedule was in\n  force until the first run after a schedule change, at which\n  point the new schedule kicked in.  This was weird, so we changed\n  it.\n\n- New Cloud Storage Solutions (global or tenant-based) are\n  considered healthy until proven broken.\n\n- `shield-agent` now has better logging to help troubleshoot\n  registration problems.\n\n# Bug Fixes\n\n- Fix an egregious bug in the scheduling logic that was only\n  considering jobs scheduled in the future to be \"overdue\".\n  Since all jobs start out with a next_run of 0, this caused NO\n  JOBS to ever be scheduled.  Thankfully, 8.x is still beta.\n\n- Fix a segfault when dereferencing a nil Task during a broadcast.\n  Now, we log that we got a nil task, to assist in tracking down\n  why / where its occurring, rather than just crashing on panic.\n\n- The `shield restore-archive` command now prints out the UUID of\n  the task scheduled to run the restore, rather than the cryptic\n  (and oh-so-unhelpful) string \"%s!:bool=true\"\n\n- Neither `shield create-job`, nor `shield update-job` will allow\n  you to create (or modify) jobs to have invalid, unparseable\n  schedules.  This will keep the CLI from accidentally creating\n  schedules that the web UI can't process.\n\n- When restoring through the new wizard, the web UI only shows\n  archives for the selected target system, instead of all of the\n  archives every made for the tenant.  Turns out this was less\n  than useful.\n\n- Fix up some edge cases where we weren't checking for the\n  existence of a tenant in tenant-scope API calls, just the rights\n  to that tenant -- since system users can affect all tenants, we\n  found that we could create child objects on non-existent\n  tenants.\n\n# Developer Stuff\n\n- `bin/testdev` now runs a WebDAV service on the nginx reverse\n  proxy (on `$PORT+1`), since we can no longer use the `fs` plugin\n  for storage operations.\n\n  On MacOS, with homebrew, you'll want to reinstall nginx with\n  WebDAV support: `brew reinstall --with-webdav nginx`\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.8",
      "version": "8.0.8"
    },
    {
      "notes": "# Improvements\n\n- New `vault` plugin for backing up Safe or Vault installations.\n  You can optionally restrict the subtree that gets backed up and\n  restored, in case you share the Vault with others.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.12",
      "version": "8.0.12"
    },
    {
      "notes": "# Improvements\n\n- Move the `vault.crypt` file out from under the `vault/` data\n  directory sub-directory; that sub-directory is dedicated to the\n  Vault instance, and we shouldn't be putting other things in there.\n\n- Threshold for storage now indicates the use of units in the form field, to\n\tprevent the accidental specification of 50 bytes when you meant 50 gigabytes.\n\n- Improved results of the /v2/info and /v2/heath API endpoints to match its\n  documented behaviour.\n\n# Deprecations\n\n- Removed FQDN from /v2/info as it was populated using DNS reverse lookups\n\tthat were less than useful.\n\n# Bug Fixes\n\n- Storage health correctly stated during creation of ad-hoc runs.\n\n- Scheduled jobs in timeline are not longer incorrectly as \"Ad-hoc\"\n\n- Admin/Sessions page no longer shows all IP Addresses as `localhost` and\n\tshows the session creation time in human-readable format.\n\n- Notes for targets are now displayed on the page for a given system.\n\n- Errors encountered when unlocking the vault now notify the user.\n\n- Release version correctly displayed on header instead of `(development)`\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.13",
      "version": "8.0.13"
    },
    {
      "notes": "# New Features\n\n- Compression of archives is now optional, on a per-target basis.\n  If you have really big databases and don't want to bother compressing\n  them, you can now turn that off and get done with your data protection\n  tasks sooner!\n\n- The Tasks API now has new time boundary range parameters, for retrieving\n  tasks based on when they started and/or stopped.\n\n# Improvements\n\n- The Systems and Storage views now have the ability to toggle between a\n  card-based layout (the default), and a table layout.\n\n- Tags in the Systems View Timeline are now only shown for non-backup tasks,\n  and only for successfully completed tasks.  In practice, this means that\n  restore operations get tags and no one else does.\n\n- The Retention Policy API / UI / CLI is better.  Namely, the API matches\n  the documation (it's a PATCH not a PUT), and we have proper bounds\n  checking on expiry days and policy name lengths.\n\n# Bug Fixes\n\n- When restoring archives with the CLI, and targeting a different data\n  system than the archive originally came from, everything works as\n  expected.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.14",
      "version": "8.0.14"
    },
    {
      "notes": "# Improvements\n\n* Credentials in task log output are now displayed as a blurred white block,\n  revealed on hover to those with sufficiently high rights.\n\n* The task log is now closed by clicking the [X] button in the log pane\n  instead of clicking the 'full task log' link again.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.15",
      "version": "8.0.15"
    },
    {
      "notes": "# New Features\n\n- We now have a BackBlaze B2 storage plugin!\n\n# Improvements\n\n- Ordinals are now optional in monthly schedule specs (via the web\n  UI), allowing front-end users to type '3' or '3rd', per their\n  strongly-held personal preference.\n\n- The `token` field of the `vault` plugins is now marked as a\n  _password_, so that autocompletion in the browser gets turned off.\n  Otherwise, Chrome/FF keeps wanting to leak your Vault tokens to\n  people.\n\n- The data directory and web UI root configurations are now\n  properly validated by the SHIELD core.  If they do not exist,\n  core startup is halted.  That way, you find out sooner if you've\n  misconfigured something.  Wheee.\n\n- `shield import` can now properly import fixed-key backup jobs.\n  Just what the doctor ordered for BOSH and SHIELD backup and\n  recovery.\n\n# Bug Fixes\n\n- Errors with hourly schedules are now properly handled and give a\n  readable error message to the front-end.\n\n- The `mysql` plugin can now properly restore a single database.\n\n- Some silly typos (some copy-pasta, some bad whitespace, some\n  we-don't-know-what-we-were-thinking) have been fixed in SHIELD\n  CLI `--help` output.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.16",
      "version": "8.0.16"
    },
    {
      "notes": "# New Features\n\n- The SHIELD Web UI now allows you to download the SHIELD CLI\n  directly, for both MacOS (Darwin) and Linux.  From now on,\n  SHIELD releases will include the paired version of the CLI.\n\n- We now support minutely backups, but only from the CLI.\n\n- New `shield op pry` for decrypting and inspecting the contents\n  of a SHIELD Vault Crypt.\n\n- New shield cli command 'delete-tenant' which will delete a tenant and clean up it's underlying configs with a -r \n\n# Improvements\n\n- SHIELD now cleans up the Vault when archives are marked as\n  expired (for purgation).\n\n- Scheduled jobs no longer \"stack\" in the queue.  If SHIELD goes\n  to schedule a backup and an existing task is in-flight for the\n  same job, an already-cancelled task is stored in the database,\n  as a placeholder to the task that should have run.\n\n- Storage Health Check Tasks no longer stack.  SHIELD only allows\n  one in-flight task for a given Cloud Storage System, at a time.\n\n- The `shield` CLI now handles API endpoints with any number of\n  trailing forward slash (`/`) characters.\n\n- Update --help page on import to reflect correct roles\n\n# Bug Fixes\n\n- Web UI page dispatch logic now properly cancels all outstanding\n  AJAX requests, to avoid a rather annoying lag/delay UX issue\n  where pages would flip \"back\" to a previous node in the history,\n  because a delayed AJAX request was still working away in the\n  background.\n\n- Updated go-s3 to help fix connection closing issue\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.17",
      "version": "8.0.17"
    },
    {
      "notes": "# Improvements\n- syncing shield release version with bosh release\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.18",
      "version": "8.0.18"
    },
    {
      "notes": "# Improvements\n- Updated postgres plugin to allow for optional flags to be supplied to pg_dump\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.0.19",
      "version": "8.0.19"
    },
    {
      "notes": "# New Features\n\n- The SHIELD Web UI now allows you to download the SHIELD CLI\n  directly, for both MacOS (Darwin) and Linux.  From now on,\n  SHIELD releases will include the paired version of the CLI.\n\n- We now support minutely backups, but only from the CLI.\n\n- New `shield op pry` for decrypting and inspecting the contents\n  of a SHIELD Vault Crypt.\n\n# Improvements\n\n- SHIELD now cleans up the Vault when archives are marked as\n  expired (for purgation).\n\n- Scheduled jobs no longer \"stack\" in the queue.  If SHIELD goes\n  to schedule a backup and an existing task is in-flight for the\n  same job, an already-cancelled task is stored in the database,\n  as a placeholder to the task that should have run.\n\n- Storage Health Check Tasks no longer stack.  SHIELD only allows\n  one in-flight task for a given Cloud Storage System, at a time.\n\n- The `shield` CLI now handles API endpoints with any number of\n  trailing forward slash (`/`) characters.\n\n# Bug Fixes\n\n- Web UI page dispatch logic now properly cancels all outstanding\n  AJAX requests, to avoid a rather annoying lag/delay UX issue\n  where pages would flip \"back\" to a previous node in the history,\n  because a delayed AJAX request was still working away in the\n  background.\n\n- `shield import` now honors the `paused` setting on jobs that it\n  creates on your behalf.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.1.0",
      "version": "8.1.0"
    },
    {
      "notes": "# Bug Fixes\n\n- The `shieldd` binary now properly reports its release version in\n  both CLI (`-v`) and web UI contexts.\n\n- The archives list on the system page now no longer gives you the\n  option of restoring invalid archives (i.e. purged stuff).\n  Thanks @thomasmitchell for finding and reporting in #506.\n\n- System-initiated archive purges now properly set the store agent\n  for purgation, so that the purge task has someone to talk to for\n  removal of the archive from cloud storage.  See #514.\n\n- The core scheduler now immediately fails any task for which the\n  remote SHIELD agent does not signal a successful (rc=0) exit\n  status.  This should clean up some task logs, and remove red\n  herring issues like JSON unmarshal failures, while\n  simultaneously ensuring that failed purge tasks are re-tried.\n  See #518.\n\n- Purge tasks are now being properly supplied with the restore key\n  necessary for deleting the archive blob.  See #516.\n\n- Agent Status tasks (op `agent-status`) were not previously being\n  created with proper global tenant association.  This prohibited\n  operators from viewing the details of those tasks.  We fixed\n  this, and added a data fixup created to re-associate existing\n  tasks.  See #522.\n\n- The HUD now always registers the global cloud storage in its\n  health data, so operators are aware of all issues with storaage\n  systems that they might be using, global or tenant-private.\n  See #504.\n\n- Jobs created via the Web UI now properly set their \"KeepN\"\n  attribute, which was missing from the ingestion / insertion.\n  Accompanying this is a new data fixup that should re-calculate\n  the `keep_n` database field wherever it is zero.  See #460.\n\n- Unlocking SHIELD was not properly giving feedback when a wrong\n  password was given or no password at all. This is now working.\n  See #524.\n\n- Previously we had issues doing a fs backup and restore of SHIELD\n  itself. Improvments to the fs plugin, and fixing permissions issues\n  within core now allow SHIELD to properly backup and restore itself.\n\n# Improvements\n\n- All `-v` handlers in CLI utilities now properly handle the 'dev'\n  version as analogous to the empty ('') version, and revert to\n  reporting the version of the binary as '(development)'.  This is\n  mainly for packaing Docker images properly.\n\n- All `shield*` CLI utilities, include the `shield` CLI itself,\n  the `shieldd` daemon, and all helper binaries now sport options\n  for getting their usage (`--help`) and versions (`--versions`).\n\n- The `s3` plugin now accepts a URL as its `s3_host` endpoint\n  parameter, affording operators more flexibility.\n  The alternative was confusion!  See #509.\n\n- When purging archives manually, you can now supply\n  human-friendly reasons for the purge.  For example, if the data\n  is known to be bad in that particular vintage of the target\n  system, you can purge the archives containing it, and explain\n  that.  See #520\n\n- Archives can now be annotated from the command-line, with the\n  `annotate-archive` command.\n\n- Manually purged archives now track their reason for purge as\n  \"manually purged\", instead of \"expired\".  See #517.\n\n- All system- and tenant-level objects can now be searched for,\n  and referenced by short UUIDs.  This is huge (though short),\n  going a long way to making the CLI easier to work with.\n\n# Release Engineering\n\n- Docker images can now be built with embedded release versions,\n  for non-dev distribution as a container image.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.2.0",
      "version": "8.2.0"
    },
    {
      "notes": "# Improvements\n\n- The `swift` plugin now supports the Openstack v3 Identity API\n\n- The `vault` plugin now supports k/v v2 endpoints, which are\n  now the default in contemporary versions of Vault.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.2.1",
      "version": "8.2.1"
    },
    {
      "notes": "# Improvements\n\n- Submit buttons on forms now (a) disable themselves when clicked\n  and (b) change their text to indicate an ongoing operation.\n  This greatly increases the usability of the web UI.  See #505\n\n- The web UI for rekeying SHIELD Core now correctly identifies\n  when the operator would like to rotate the fixed key.  Also, the\n  error messaging for an incorrect _current_ master password is\n  better now, and by default, the \"rotate fixed key\" checkbox on\n  the rekeying form is off.  See #546\n\n- The default password for the failsafe account has been changed\n  from `shield` to `password`, for more continuity across various\n  packaging formats.  See #531\n\n- The `shield tasks` command (and the backing API) can now filter\n  tasks based on their task type (i.e. \"backup\", or \"restore\")\n  See #523\n\n- The `Encryption` column of the system detail page's backup jobs\n  table now _always_ shows something.  For jobs that do not used\n  the fixed key, the new tag is `randomized`.  See #536\n\n- SHIELD now tracks when it last checked each agent separately\n  from when it last \"saw\" the agent.  _Last Seen_ now means the\n  point in time when the agent last connected to the SHIELD core,\n  and _Last Checked_ is when the core last connected to the agent\n  for metadata retrieval.\n\n- SHIELD now allows agents to change their IP address; only the\n  agent name is unchangeable.  Previously, attempts to change an\n  agents registered IP address (without changing its name) would\n  fail.\n\n- Both the SHIELD Agent and the SHIELD CLI now trust the system\n  X.509 CA Certificate Stores.  See #555 and #556\n\n# Bug Fixes\n\n- The MotD separator no longer displays if the MotD is empty\n  or not specified.  See #530\n\n- The Ad Hoc Backup and Restore wizards now handle the \"empty\"\n  state more gracefully, and instead of showing an empty table\n  when there are no data systems, they warn you that you have\n  no systems to backup or restore.  See #532 and #533\n\n- Stores (global and tenant-specific) can now be properly deleted\n  via the web UI and CLI.\n\n- When editing targets and stores on the webui changes are now\n  persisted when editing again without a refresh.\n\n- The \"Agents of SHIELD\" admin page no longer gets stuck in a\n  loading loop whenever websocket events are seen.\n\n- Global Storage Configuration details are now properly loaded\n  when accessing a global store detail page from the admin panel.\n  Previously, the details would only load if you visited the\n  global store from the \"Storage Systems\" (non-admin) top-level,\n  which only works if you actually have a tenant.  See #535\n\n- `shield annotate-archive` now works with short uuids\n\n- Orphaned archives from a target deletion no longer prevent users\n  from loggin into SHIELD\n\n- The `mongo` plugin now handles hosts with embedded ports,\n  allowing operators to configure multi-node mongo across\n  different ports on the same node, without `--port` getting in\n  the way.\n\n- The `mongo` plugin now allows you to authenticate against a\n  database _other_ than \"admin\" (which remains the default).\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.3.0",
      "version": "8.3.0"
    },
    {
      "notes": "# New Features\n\n- SHIELD now features a new `etcd` plugin for backing up and restoring your etcd key-value stores.  It supports single- and multi-node clusters and can authenticate via roles and X.509 certificates.  If you want, you can restrict the backup to a subset of the etcd tree (via a prefix setting).  It also supports _additive restore_ for situations that need it. You can also do a clean restore of the etcd cluster.\n\n# Improvements\n\n- The `cancel`, `task`, `restore-archive` and `purge-archive`\n  commands in the SHIELD CLI now properly support short UUIDs,\n  like all other commands.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.4.0",
      "version": "8.4.0"
    },
    {
      "notes": "# Improvements\n\n* Added a /v2/mbus/status API endpoint that returns metrics about the state of\n\tthe event message bus. This allows for some introspection into what websocket\n\tconnections may be doing at that moment.\n* The UI now has less wasted space when displaying a bunch of cards for data\n\tsystems.\n* Implemented a configurable timeout when making SSH connections to agents. A\n\tlower default now also keeps dead agents from taking up large amounts of\n\tscheduler worker time.\n* SHIELD now tracks when the last time an agent erred was.\n* Hidden agents are now sorted under a separate header in the web UI.\n* Hiding, showing, and deleting agents can now be done from the CLI.\n\n\n# Bug Fixes\n\n* We no longer leak the file descriptors and goroutines for detached websocket\n\tclients\n* Workers can no longer be starved out when sending events to the message bus\n\tif the receiver of the message bus is misbehaving because these event sends\n\tare now asynchronous.\n* Fixed a bug where a worker could derefence a nil pointer when certain\n\tdatabase selects returned no rows.\n* The database layer now has more stringent locking, which both avoids certain\n\tthreads locking each other out in SQLite, and also makes certain series of\n\tdatabase operations effectively atomic.\n* A couple of fixups would deadlock themselves out of the database and prevent\n\tfixups from actually running. Now they don't.\n* Fixups now only run once instead of on every startup, like nature intended.\n* The agent \"Last Checked At\" timestamp was being updated when the task was\n  pulled off the scheduler, whether or not the agent was actually checked\n  (due to other potential errors).\n* Named a fixup without a name.\n* Agents that failed their status checks are now once again marked as such.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.4.1",
      "version": "8.4.1"
    },
    {
      "notes": "# Improvements\n\n- The `shield status` command is twice as pretty and three times\n  as useful.\n\n- Cloud Storage detail pages in the web interface now show a\n  timeline similar to the one shown for Data Systems, so that\n  SHIELD operators have an easier time of troubleshooting failing\n  storage configurations.\n\n- The SHIELD CLI now displays task+log data for the last\n  test-store task of a given store (for `shield store X` and\n  `shield global-store Y`), to assist in troubleshooting failing\n  storage configurations.\n\n- Operators now have a web interface and some CLI commands for\n  inspecting the state of SHIELD Data Fixups, and re-running them\n  (if / when necessary).\n\n- The `mongo` target plugin can now have options applied\n  individually to just `mongodump` or `mongorestore`.\n\n- Passwords and RSA private keys are now properly obscured in\n  the web interface detail pages for both systems and cloud\n  storage.  People without rights to see such credentials will\n  still see the \"REDACTED\" string instead; but people with the\n  required privilege will instead see the blurred-out obscured\n  text that they can hover over to reveal.\n\n- The `shield tasks` command can now filter down to only tasks\n  that involve a particular tenant or global cloud storage system.\n\n# Bug Fixes\n\n- Data Fixups will now be properly skipped if they've already been\n  applied.  Additionally, names / dates / summaries will be\n  updated _every time_ the SHIELD Core boots up, to catch typos\n  and mispellings there.\n\n- The Data System detail page in the web interface no longer has a\n  race condition between the start of an AJAX call for the plugin\n  configuration details and a `shield:navigate` away from the\n  page.  Other such race conditions involving AJAX should now also\n  be fixed.\n\n- Switching between tenants (with differing levels of access) now\n  properly re-renders the sidebar to show your new privileges.\n\n- The `shield job X` command now populates the \"Status\" and\n  \"Agent\" fields, using data in the API responses.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.5.0",
      "version": "8.5.0"
    },
    {
      "notes": "# New Features\n\n- Helm Support!  This version of SHIELD ships with OCI Docker\n  images that can be used in the new (Beta!) helm chart for\n  SHIELD.  See https://github.com/shieldproject/helm for more\n  details, and to give it a spin yourself.\n\n- The SHIELD Core can now be configured almost entirely through\n  environment variables, for ease of configuration in Docker,\n  Compose, and even Kubernetes.\n\n- We have a new Prometheus-compatible metrics exporter, accessible\n  at `/metrics`, and governed by a separate set of HTTP Basic Auth\n  credentials.\n\n# Improvements\n\n- Agent SSH is now constrained to a more secure set of message\n  authentication codes (MACs).  Specifically, we got rid of one\n  embarassing 96-bit MAC algorithm.  Ooof!\n\n- Several quality-of-life improvements were made to the web UI\n  and message bus / websocket implementations.  In general, the\n  web interface is easier to use and more robust now.\n\n- Old task logs and purged archives will now be removed from the\n  database after a minimum retention period has passed.  If you've\n  been with us since the 0.x days, this update is for you, and\n  we're sorry it's taken us so long to do this type of cleanup.\n\n- The SHIELD IP Address (which gets less and less relevant every\n  day) is no longer reported via the API / web UI.\n\n# Bug Fixes\n\n- Uncompressed backups can now properly be restored.\n\n- The `healthy` and `paused` fields of the Jobs table now no\n  longer allows NULL values, landing us squarely back in the\n  territory of booleanitude -- things are either true or false;\n  there is no maybe.\n\n- Negative daily storage increases now properly convert to kilo-,\n  mega-, and giga- units, to help humans understand magnitude.\n\n- The `api.session.timeout` value is now interpreted properly as\n  seconds, not hours.  This effectively means that sessions now\n  expire when they ought to, not several orders of magnitude\n  later.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.6.0",
      "version": "8.6.0"
    },
    {
      "notes": "This release chiefly introduces logic to existing and new database\nschema migrations to fix fallout from the 8.6.0 release, in which\nwe mistakenly modified a historic migration to do something.\n\nAll database upgrade paths, including pre-8.6.0 → present,\n(failing) 8.6.0 deployment → present, and brand new deployments,\nshould all work now.\n\n# Improvements\n\n- The `fs` plugin is now quieter by default, and will only turn on\n  per-file debug logging if asked to do so via its own\n  configuration.  This should greatly speed up backup operations\n  on busy SHIELDs, since it reduces the database lock contention.\n\n# Bug Fixes\n\n- The front-end configuration wizard now properly looks up\n  plugin metadata for an agent.  Previously, there was a\n  Javascript variable shadowing bug that caused the front-end to\n  return any arbitrary plugin metadata as the \"correct\" one.\n\n- Task cancelation had a n inverted boolean assertion on global\n  tenant-iness that has been fixed.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.6.1",
      "version": "8.6.1"
    },
    {
      "notes": "This release fixes issues with failed 8.5.0 → 8.6.0 migrations\nthat left the interim `jobs_new` table around.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.6.2",
      "version": "8.6.2"
    },
    {
      "notes": "# Bug Fixes\n\n* The Web UI, when sorting, is now case-insensitive.\n* The data-system-specific storage footprint in the Web UI now no longer\n  counts purged archives against the storage footprint.\n* The core no longer leaks a SQL prepared statement when making requests\n  to the SQLite3 backend, fixing an unbounded memory leak.\n* The migration to database schema v12 now reports errors more granularly.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.6.3",
      "version": "8.6.3"
    },
    {
      "notes": "New Features\n\n- SHIELD now features a new `metashield` plugin for backing up and restoring your shield core(s). This is a standardized way\nfor SHIELD to backup/restore itself or another SHIELD instance.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.7.0",
      "version": "8.7.0"
    },
    {
      "notes": "# Improvements\n\n- Docker images are now compiling via the go 1.13 toolchain.\n\n- Agent Registration can now occur through chained load balancers,\n  with standards-compliant comma-separated X-Forwarded-For\n  headers.  Why you would want to do this is beyond me, but ¯\\_(ツ)\\_/¯\n\n- The `metashield` plugin now trusts system X.509 Root CAs if no\n  specific CA is supplied.\n\n- Bootstrap restoration is simpler now, and the UI for init /\n  restore is more streamlined.  See #680.\n",
      "url": "https://github.com/shieldproject/shield/releases/tag/v8.7.3",
      "version": "8.7.3"
    }
  ],
  "latest": "8.7.3"
}
