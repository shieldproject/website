---
meta:
  name:   shieldproject.cloud
  target: shield@pipes
  url:    https://pipes.scalecf.net

  pws:
    username: ((pws.username))
    password: ((pws.password))
    org:      shieldproject
    space:    shieldproject
    api:      https://api.run.pivotal.io

  github:
    website:
      uri:          git@github.com:shieldproject/website
      master:       master
      staging:      staging
      private_key:  ((github.private_key))
      access_token: ((github.access_token))

    shield:
      uri:          git@github.com:shieldproject/shield
      branch:       master
      private_key:  ((github.private_key))
      access_token: ((github.access_token))

  shout:
    topic:    (( grab meta.name ))
    url:      ((shout.url))
    username: ((shout.username))
    password: ((shout.password))

    metadata:
      build-team-name:     $BUILD_TEAM_NAME
      build-job-name:      $BUILD_JOB_NAME
      build-pipeline-name: $BUILD_PIPELINE_NAME

    links:
      pipeline: (( concat meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME" ))
      build:    (( concat meta.shout.links.pipeline "/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME" ))

jobs:
  - name: build
    plan:
      - in_parallel:
        - { get: changes }
        - { get: releases, trigger: true }
        - { get: shield }
      - task: checkout-tag
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: huntprod/verse
              tag:        latest
          inputs:
            - name: shield
            - name: releases
          outputs:
            - name: shield-checked-out
          run:
            path: sh
            args:
              - -exc
              - 'cd shield && git checkout "$(cat ../releases/tag)" && cd ..  && cp -R shield/* shield-checked-out'

      - task: build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: huntprod/verse
              tag:        latest
          inputs:
            - name: changes
            - name: releases
            - name: shield-checked-out
          outputs:
            - name: pushme
          run:
            path: ./changes/ci/scripts/build
            args: []
          params:
            REPO_ROOT:   changes
            REPO_OUT:    pushme
            BRANCH:      (( grab meta.github.website.master ))
        on_success:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: website build job '$BUILD_JOB_NAME' succeeded.
            ok:      yes
            link:    (( grab meta.shout.links.build ))
        on_failure:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: website build job '$BUILD_JOB_NAME' failed.
            ok:      no
            link:    (( grab meta.shout.links.build ))
      - put: master@github
        params:
          rebase: true
          repository: pushme/changes

  - name: staging
    plan:
      - { get: staging@github, trigger: true }
      - task: deploy
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: huntprod/verse
              tag:        latest
          inputs:
            - name: staging@github
              path: code
          run:
            path: ./code/ci/scripts/stage
            args: []
          params:
            CF_API_URL:  (( grab meta.pws.api ))
            CF_USERNAME: (( grab meta.pws.username ))
            CF_PASSWORD: (( grab meta.pws.password ))
            CF_ORG:      (( grab meta.pws.org ))
            CF_SPACE:    (( grab meta.pws.space ))
            MANIFEST:    manifest-stage.yml
            REPO_ROOT:   code
        on_success:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: staging job '$BUILD_JOB_NAME' succeeded.
            ok:      yes
            link:    (( grab meta.shout.links.build ))
        on_failure:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: staging job '$BUILD_JOB_NAME' failed.
            ok:      no
            link:    (( grab meta.shout.links.build ))
      - put: notify
        params:
          topic:   (( grab meta.shout.topic ))
          method:  announce
          message: Changes deployed to the staging site.  Please review them and then merge origin/staging â†’ origin/master.
          link:    (( grab meta.shout.links.pipeline ))

  - name: production
    plan:
      - { get: master@github, trigger: true }
      - task: deploy
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: huntprod/verse
              tag:        latest
          inputs:
            - name: master@github
              path: code
          run:
            path: ./code/ci/scripts/stage
            args: []
          params:
            CF_API_URL:  (( grab meta.pws.api ))
            CF_USERNAME: (( grab meta.pws.username ))
            CF_PASSWORD: (( grab meta.pws.password ))
            CF_ORG:      (( grab meta.pws.org ))
            CF_SPACE:    (( grab meta.pws.space ))
            MANIFEST:    manifest.yml
            REPO_ROOT:   code
        on_success:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: deployment job '$BUILD_JOB_NAME' succeeded.
            ok:      yes
            link:    (( grab meta.shout.links.build ))
        on_failure:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: deployment job '$BUILD_JOB_NAME' failed.
            ok:      no
            link:    (( grab meta.shout.links.build ))
      - put: notify
        params:
          topic:   (( grab meta.shout.topic ))
          method:  announce
          message: Changes deployed to production!  Good job everyone!
          link:    https://shieldproject.io

resource_types:
  - name: shout-notification
    type: docker-image
    source:
      repository: huntprod/shout-resource


resources:
  - name: changes
    type: git
    source:
      uri:         (( grab meta.github.website.uri ))
      branch:      (( grab meta.github.website.master ))
      private_key: (( grab meta.github.website.private_key ))
      ignore_paths:
        - htdocs

  - name: master@github
    type: git
    source:
      uri:         (( grab meta.github.website.uri ))
      branch:      (( grab meta.github.website.master ))
      private_key: (( grab meta.github.website.private_key ))

  - name: staging@github
    type: git
    source:
      uri:         (( grab meta.github.website.uri ))
      branch:      (( grab meta.github.website.staging ))
      private_key: (( grab meta.github.website.private_key ))

  - name: releases
    type: github-release
    source:
      user:         shieldproject
      repository:   shield
      access_token: (( grab meta.github.shield.access_token ))

  - name: notify
    type: shout-notification
    source:
      topic:    (( grab meta.shout.topic ))
      url:      (( grab meta.shout.url ))
      username: (( grab meta.shout.username ))
      password: (( grab meta.shout.password ))

  - name: shield
    type: git
    source:
      uri:         (( grab meta.github.shield.uri ))
      branch:      (( grab meta.github.shield.branch ))
      private_key: (( grab meta.github.shield.private_key ))
      ignore_paths:
        - htdocs
